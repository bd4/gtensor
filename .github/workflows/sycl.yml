name: SYCL CI

on: workflow_dispatch

jobs:
  test-sycl:
    runs-on: ubuntu-latest
    #container: intel/oneapi-basekit:devel-ubuntu18.04
    container: ubuntu:18.04
    env:
      CXX: /opt/intel/oneapi/compiler/latest/linux/bin/dpcpp
      DPCPP_ROOT: /opt/intel/oneapi
      INTEL_LICENSE_FILE: /opt/intel/oneapi/compiler/latest/licensing
      LD_LIBRARY_PATH: /opt/intel/oneapi/compiler/latest/linux/lib:/opt/intel/oneapi/compiler/latest/linux/lib/x64:/opt/intel/oneapi/compiler/latest/linux/compiler/lib/intel64_lin:/opt/intel/oneapi/compiler/latest/linux/compiler/lib:/opt/intel/oneapi/ccl/2021.1-beta09/lib/cpu_gpu_dpcpp
      GTEST_VERSION: 1.10.0
      GTEST_ROOT: ${{ github.workspace }}/googletest
      SYCL_DEVICE_TYPE: host

    steps:
    - name: install core packages
      run: apt-get update -y && apt-get install -y wget git build-essential gnupg clang-9
    - name: setup oneapi repos
      run: |
        wget -q -O - 'https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB' | apt-key add -
        echo "deb https://apt.repos.intel.com/oneapi all main" > /etc/apt/sources.list.d/oneAPI.list
        echo 'deb [trusted=yes arch=amd64] https://repositories.intel.com/graphics/ubuntu bionic-devel main' > /etc/apt/sources.list.d/intel-graphics.list
        apt-get update -y
    - name: install dpcpp
      run: apt-get install -y intel-oneapi-dpcpp-cpp-compiler-2021.1-beta09 clinfo intel-opencl intel-level-zero-gpu level-zero
    - uses: actions/checkout@v2
    - name: clinfo
      run: |
        mkdir -p /etc/OpenCL/vendors
        echo "libintelocl.so" > /etc/OpenCL/vendors/intel-cpu.icd
        clinfo
    - name: install cmake
      run: |
        wget -O cmake.sh 'https://github.com/Kitware/CMake/releases/download/v3.17.2/cmake-3.17.2-Linux-x86_64.sh'
        bash cmake.sh --prefix=/usr --skip-license --exclude-subdir
    - name: install googletest
      run: |
        mkdir -p ${{ env.GTEST_ROOT }}
        cd ${{ env.GTEST_ROOT }}
        wget https://github.com/google/googletest/archive/release-${{ env.GTEST_VERSION }}.tar.gz
        tar xzf release-${{ env.GTEST_VERSION }}.tar.gz
        cmake -S googletest-release-${{ env.GTEST_VERSION }} -B build -DCMAKE_INSTALL_PREFIX=${{ env.GTEST_ROOT }}
        cmake --build build -t install
      env:
        CXX: clang++-9
    - name: cmake cpu
      run: cmake -S . -B build-sycl-cpu -DGTENSOR_DEVICE=sycl -DCMAKE_BUILD_TYPE=RelWithDebInfo -DGTENSOR_BUILD_EXAMPLES=ON -DGTENSOR_DEVICE_SYCL_SELECTOR=host -DGTEST_ROOT=${{ env.GTEST_ROOT }}
    - name: cmake cpu build
      run: cmake --build build-sycl-cpu -v
    - name: cmake cpu run tests
      run: cmake --build build-sycl-cpu -v -t test
    - name: cmake cpu run daxpy
      run: ./daxpy
      working-directory: ${{ github.workspace }}/build-sycl-cpu/examples
    - name: cmake cpu run stencil1d
      run: ./stencil1d
      working-directory: ${{ github.workspace }}/build-sycl-cpu/examples
    - name: cmake cpu run mult_table
      run: ./mult_table
      working-directory: ${{ github.workspace }}/build-sycl-cpu/examples
    - name: GNU make setup gtensor subdir
      run: mkdir -p external/gtensor &&  cp -R ../include external/gtensor/
      working-directory: ${{ github.workspace }}/examples
    - name: GNU make build
      run: make GTENSOR_DEVICE=sycl GTENSOR_DEVICE_SYCL_SELECTOR=cpu
      working-directory: ${{ github.workspace }}/examples
    - name: GNU make run daxpy
      run: ./daxpy
      working-directory: ${{ github.workspace }}/examples
    - name: GNU make run stencil1d
      run: ./stencil1d
      working-directory: ${{ github.workspace }}/examples
    - name: GNU make run mult_table
      run: ./mult_table
      working-directory: ${{ github.workspace }}/examples
