name: C/C++ CI CPU

on:
  push:
    branches: [ master, 'pr/*' ]
  pull_request:
    branches: [ master ]

jobs:

  clang-format:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - uses: DoozyX/clang-format-lint-action@v0.5
      with:
        source: '.'
        extensions: 'h,cxx'
        clangFormatVersion: 9

  tests-cpu:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        cxx: [ 'g++-7', 'g++-8', 'g++-9', 'clang++-8', 'clang++-9' ]
    name: tests-cpu-${{ matrix.cxx }}

    steps:
    - uses: actions/checkout@v2
    - name: cmake
      run: cmake -S . -B build-tests-${{ matrix.cxx }} -DGTENSOR_DEVICE=host -DCMAKE_BUILD_TYPE=RelWithDebInfo
      env:
        CXX: ${{ matrix.cxx }}
    - name: build
      run: cmake --build build-tests-${{ matrix.cxx }} -v
    - name: test
      run: cmake --build build-tests-${{ matrix.cxx }} -t test


  examples-cpu:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        cxx: [ 'g++-7', 'g++-8', 'g++-9', 'clang++-8', 'clang++-9' ]
    name: examples-cpu-${{ matrix.cxx }}

    steps:
    - uses: actions/checkout@v2
    - name: cmake
      run: cmake -S . -B build-examples-${{ matrix.cxx }} -DGTENSOR_DEVICE=host -DCMAKE_BUILD_TYPE=RelWithDebInfo -DGTENSOR_BUILD_EXAMPLES=ON -DBUILD_TESTING=OFF
      env:
        CXX: ${{ matrix.cxx }}
    - name: build
      run: cmake --build build-examples-${{ matrix.cxx }} -v
    - name: daxpy
      run: ./build-examples-${{ matrix.cxx }}/examples/daxpy
    - name: stencil1d
      run: ./build-examples-${{ matrix.cxx }}/examples/stencil1d
    - name: mult_table
      run: ./build-examples-${{ matrix.cxx }}/examples/mult_table


  examples-cpu-gnu-make:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: setup gtensor subdir
      run: mkdir -p external/gtensor &&  cp -R ../include external/gtensor/
      working-directory: ${{ github.workspace }}/examples
    - name: build
      run: make GTENSOR_DEVICE=host
      working-directory: ${{ github.workspace }}/examples
    - name: daxpy
      run: ./daxpy
      working-directory: ${{ github.workspace }}/examples
    - name: stencil1d
      run: ./stencil1d
      working-directory: ${{ github.workspace }}/examples
    - name: mult_table
      run: ./mult_table
      working-directory: ${{ github.workspace }}/examples


  cmake-subdir:
    runs-on: ubuntu-latest
    env:
      cxx: 'clang++-9'
    defaults:
      run:
        working-directory: ${{ github.workspace }}/examples

    steps:
    - uses: actions/checkout@v2
    - name: cmake
      run: cmake -S . -B build-subdir -DGTENSOR_DEVICE=host -DCMAKE_BUILD_TYPE=RelWithDebInfo
    - name: build
      run: cmake --build build-subdir -v
    - name: daxpy
      run: ./build-subdir/daxpy
    - name: stencil1d
      run: ./build-subdir/stencil1d
    - name: mult_table
      run: ./build-subdir/mult_table


  cmake-install:
    runs-on: ubuntu-latest
    env:
      cxx: 'clang++-9'

    steps:
    - uses: actions/checkout@v2
    - name: gtensor cmake
      run: cmake -S . -B build-install -DGTENSOR_DEVICE=host -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/gtensor-install -DBUILD_TESTING=OFF
    - name: gtensor install
      run: cmake --build build-install -v -t install
    - name: examples cmake
      run: cmake -S . -B build-find-package -DGTENSOR_DEVICE=host -DCMAKE_BUILD_TYPE=RelWithDebInfo -DGTENSOR_EXAMPLES_USE_FIND_PACKAGE=ON
      working-directory: ${{ github.workspace }}/examples
      env:
        gtensor_DIR: ${{ github.workspace }}/gtensor-install
    - name: examples build
      run: cmake --build build-find-package -v
      working-directory: ${{ github.workspace }}/examples
    - name: daxpy
      run: ./build-find-package/daxpy
      working-directory: ${{ github.workspace }}/examples
    - name: stencil1d
      run: ./build-find-package/stencil1d
      working-directory: ${{ github.workspace }}/examples
    - name: mult_table
      run: ./build-find-package/mult_table
      working-directory: ${{ github.workspace }}/examples


  build-cuda:
    runs-on: ubuntu-latest
    container: nvidia/cuda:10.0-devel
    env:
      GTEST_VERSION: 1.10.0
      GTEST_ROOT: ${{ github.workspace }}/googletest

    steps:
    - uses: actions/checkout@v2
    - name: install packages
      run: apt-get update && apt-get install -y wget git
    - name: install cmake
      run: |
        wget -O cmake.sh 'https://github.com/Kitware/CMake/releases/download/v3.17.2/cmake-3.17.2-Linux-x86_64.sh'
        bash cmake.sh --prefix=/usr --skip-license --exclude-subdir
    - name: install googletest
      run: |
        mkdir -p ${{ env.GTEST_ROOT }}
        cd ${{ env.GTEST_ROOT }}
        wget https://github.com/google/googletest/archive/release-${{ env.GTEST_VERSION }}.tar.gz
        tar xzf release-${{ env.GTEST_VERSION }}.tar.gz
        cmake -S googletest-release-${{ env.GTEST_VERSION }} -B build -DCMAKE_INSTALL_PREFIX=${{ env.GTEST_ROOT }}
        cmake --build build -t install
      env:
        CXX: g++-7
    - name: cmake thrust
      run: cmake -S . -B build-cuda -DGTENSOR_DEVICE=cuda -DCMAKE_BUILD_TYPE=RelWithDebInfo -DGTENSOR_BUILD_EXAMPLES=ON -DGTENSOR_USE_THRUST=ON -DGTEST_ROOT=${{ env.GTEST_ROOT }}
    - name: cmake thrust build
      run: cmake --build build-cuda -v
    - name: cmake nothrust
      run: cmake -S . -B build-cuda-nothrust -DGTENSOR_DEVICE=cuda -DCMAKE_BUILD_TYPE=RelWithDebInfo -DGTENSOR_BUILD_EXAMPLES=ON -DGTENSOR_USE_THRUST=OFF -DGTEST_ROOT=${{ env.GTEST_ROOT }}
    - name: cmake nothrust build
      run: cmake --build build-cuda-nothrust -v
    - name: GNU make setup gtensor subdir
      run: mkdir -p external/gtensor &&  cp -R ../include external/gtensor/
      working-directory: ${{ github.workspace }}/examples
    - name: GNU make build
      run: make GTENSOR_DEVICE=cuda
      working-directory: ${{ github.workspace }}/examples


  build-hip:
    runs-on: ubuntu-latest
    #container: rocm/dev-ubuntu-18.04:3.3
    container: rocm/dev-ubuntu-18.04:3.5
    env:
      # NOTE: in 3.3 tag the repo only has 3.5, so anything not pre-installed
      # will be in the 3.5.0 directory. Since only rocthrust/rocprim are
      # missing and they have no further dependencies, this can be worked
      # around by simply adding the second cmake dir.
      #CMAKE_PREFIX_PATH: /opt/rocm/lib/cmake:/opt/rocm-3.5.0/lib/cmake
      CMAKE_PREFIX_PATH: /opt/rocm/lib/cmake
      CXX: /opt/rocm/bin/hipcc
      HCC_AMDGPU_TARGET: gfx803
      GTEST_VERSION: 1.10.0
      GTEST_ROOT: ${{ github.workspace }}/googletest

    steps:
    - uses: actions/checkout@v2
    - name: install packages
      run: apt-get update && apt-get install -y wget git clang-9 rocthrust
    - name: install cmake
      run: |
        wget -O cmake.sh 'https://github.com/Kitware/CMake/releases/download/v3.17.2/cmake-3.17.2-Linux-x86_64.sh'
        bash cmake.sh --prefix=/usr --skip-license --exclude-subdir
    - name: install googletest
      run: |
        mkdir -p ${{ env.GTEST_ROOT }}
        cd ${{ env.GTEST_ROOT }}
        wget https://github.com/google/googletest/archive/release-${{ env.GTEST_VERSION }}.tar.gz
        tar xzf release-${{ env.GTEST_VERSION }}.tar.gz
        cmake -S googletest-release-${{ env.GTEST_VERSION }} -B build -DCMAKE_INSTALL_PREFIX=${{ env.GTEST_ROOT }}
        cmake --build build -t install
      env:
        CXX: clang++-9
    - name: cmake thrust
      run: cmake -S . -B build-hip -DGTENSOR_DEVICE=hip -DCMAKE_BUILD_TYPE=RelWithDebInfo -DGTENSOR_BUILD_EXAMPLES=ON -DGTENSOR_USE_THRUST=ON -DGTEST_ROOT=${{ env.GTEST_ROOT }}
    - name: cmake thrust build
      run: cmake --build build-hip -v
    - name: cmake nothrust
      run: cmake -S . -B build-hip-nothrust -DGTENSOR_DEVICE=hip -DCMAKE_BUILD_TYPE=RelWithDebInfo -DGTENSOR_BUILD_EXAMPLES=ON -DGTENSOR_USE_THRUST=OFF -DGTEST_ROOT=${{ env.GTEST_ROOT }}
    - name: cmake nothrust build
      run: cmake --build build-hip-nothrust -v
    - name: GNU make setup gtensor subdir
      run: mkdir -p external/gtensor &&  cp -R ../include external/gtensor/
      working-directory: ${{ github.workspace }}/examples
    - name: GNU make build
      run: make GTENSOR_DEVICE=hip
      working-directory: ${{ github.workspace }}/examples


  test-sycl:
    runs-on: ubuntu-latest
    #container: intel/oneapi-basekit:devel-ubuntu18.04
    container: ubuntu:18.04
    env:
      CXX: /opt/intel/inteloneapi/compiler/latest/linux/bin/dpcpp
      DPCPP_ROOT: /opt/intel/inteloneapi
      INTEL_LICENSE_FILE: /opt/intel/inteloneapi/compiler/latest/licensing
      LD_LIBRARY_PATH: /opt/intel/inteloneapi/compiler/latest/linux/lib:/opt/intel/inteloneapi/compiler/latest/linux/lib/x64:/opt/intel/inteloneapi/compiler/latest/linux/compiler/lib/intel64_lin:/opt/intel/inteloneapi/compiler/latest/linux/compiler/lib:/opt/intel/inteloneapi/ccl/2021.1-beta06/lib/cpu_gpu_dpcpp
      GTEST_VERSION: 1.10.0
      GTEST_ROOT: ${{ github.workspace }}/googletest

    steps:
    - name: install core packages
      run: apt-get update -y && apt-get install -y wget git build-essential gnupg clang-9
    - name: setup oneapi repos
      run: |
        wget -O - 'https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB' | apt-key add -
        echo "deb https://apt.repos.intel.com/oneapi all main" > /etc/apt/sources.list.d/oneAPI.list
        echo 'deb [trusted=yes arch=amd64] https://repositories.intel.com/graphics/ubuntu bionic-devel main' > /etc/apt/sources.list.d/intel-graphics.list
        apt-get update -y
    - name: install dpcpp
      run: apt-get install -y intel-oneapi-dpcpp-compiler clinfo intel-opencl intel-level-zero-gpu level-zero
    - uses: actions/checkout@v2
    - name: clinfo
      run: |
        mkdir -p /etc/OpenCL/vendors
        echo "libintelocl.so" > /etc/OpenCL/vendors/intel-cpu.icd
        clinfo
    - name: install cmake
      run: |
        wget -O cmake.sh 'https://github.com/Kitware/CMake/releases/download/v3.17.2/cmake-3.17.2-Linux-x86_64.sh'
        bash cmake.sh --prefix=/usr --skip-license --exclude-subdir
    - name: install googletest
      run: |
        mkdir -p ${{ env.GTEST_ROOT }}
        cd ${{ env.GTEST_ROOT }}
        wget https://github.com/google/googletest/archive/release-${{ env.GTEST_VERSION }}.tar.gz
        tar xzf release-${{ env.GTEST_VERSION }}.tar.gz
        cmake -S googletest-release-${{ env.GTEST_VERSION }} -B build -DCMAKE_INSTALL_PREFIX=${{ env.GTEST_ROOT }}
        cmake --build build -t install
      env:
        CXX: clang++-9
    - name: cmake cpu
      run: cmake -S . -B build-sycl-cpu -DGTENSOR_DEVICE=sycl -DCMAKE_BUILD_TYPE=RelWithDebInfo -DGTENSOR_BUILD_EXAMPLES=ON -DGTENSOR_DEVICE_SYCL_SELECTOR=host -DGTEST_ROOT=${{ env.GTEST_ROOT }}
    - name: cmake cpu build
      run: cmake --build build-sycl-cpu -v
    - name: cmake cpu run tests
      run: cmake --build build-sycl-cpu -v -t test
    - name: cmake cpu run daxpy
      run: ./daxpy
      working-directory: ${{ github.workspace }}/build-sycl-cpu/examples
    - name: cmake cpu run stencil1d
      run: ./stencil1d
      working-directory: ${{ github.workspace }}/build-sycl-cpu/examples
    - name: cmake cpu run mult_table
      run: ./mult_table
      working-directory: ${{ github.workspace }}/build-sycl-cpu/examples
    - name: GNU make setup gtensor subdir
      run: mkdir -p external/gtensor &&  cp -R ../include external/gtensor/
      working-directory: ${{ github.workspace }}/examples
    - name: GNU make build
      run: make GTENSOR_DEVICE=sycl GTENSOR_DEVICE_SYCL_SELECTOR=cpu
      working-directory: ${{ github.workspace }}/examples
    - name: GNU make run daxpy
      run: ./daxpy
      working-directory: ${{ github.workspace }}/examples
    - name: GNU make run stencil1d
      run: ./stencil1d
      working-directory: ${{ github.workspace }}/examples
    - name: GNU make run mult_table
      run: ./mult_table
      working-directory: ${{ github.workspace }}/examples
